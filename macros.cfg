[pause_resume]

[gcode_macro TUNE_PA]
gcode:
    #SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500 ACCEL_TO_DECEL=250
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.0025

[gcode_macro TUNE_RETRACTION]
gcode:
    TUNING_TOWER COMMAND=SET_RETRACTION PARAMETER=RETRACT_LENGTH START=0 FACTOR=0.01

[gcode_macro SET_FEEDRATE]
gcode:
    {% set PERCENTAGE = params.PERCENTAGE|default(100)|int %}
    M220 S{PERCENTAGE}

[gcode_macro TUNE_FEEDRATE]
gcode:
    TUNING_TOWER COMMAND="SET_FEEDRATE" PARAMETER=PERCENTAGE START=50 FACTOR=20 BAND=5

[gcode_macro TUNE_SQV]
gcode:
    TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=SQUARE_CORNER_VELOCITY START=1 FACTOR=0.5

[gcode_macro TUNE_ACCEL]
gcode:
    SET_PRESSURE_ADVANCE ADVANCE=0
    SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
    TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1250 FACTOR=100 BAND=5

[gcode_macro LOAD]
gcode:
    {% if printer.extruder.temperature < 235 %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=235
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM=235      
    {% endif %}
    M83
    G1 E85 F300

[gcode_macro UNLOAD]
gcode:
    {% if printer.extruder.temperature < 235 %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=235
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM=235      
    {% endif %}
    M83
    G1 E5 F600
    G1 E-50 F1200

[gcode_macro WAIT_FIVE_MIN]
gcode:
    G4 P300000 

[gcode_macro WAIT_TEN_MIN]
gcode:
    G4 P600000 

[gcode_macro WAIT_TWENTY_MIN]
gcode:
    G4 P1200000 

# broken
#[delayed_gcode check_fan_rpm]
#initial_duration: 4.
#gcode: 
#    {% if (printer['heater_fan hotend_fan'].speed) and (hotend_fan.rpm < 60) %}
#      {action_call_remote_method("set_device_power",device="printer",state="off")}
#    {% endif %}
#    UPDATE_DELAYED_GCODE ID=check_fan_rpm DURATION=4

[homing_override]
set_position_z: 0
gcode:
  M400         # Wait for moves to finish
  # Reduce motor current  
  #
  SET_VELOCITY_LIMIT ACCEL=1200
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.4
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.4
  G0 Z10           # Hop Z-Axis
  G28 Y                 # Home Y-Axis
  G28 X                 # Home X-Axis
  # Go to center
  {% set x_home = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_home = printer.toolhead.axis_maximum.y|float / 2 %}
  G0 X{x_home - printer.configfile.config.bltouch.x_offset|float} Y{y_home - printer.configfile.config.bltouch.y_offset|float} F12000
  G28 Z                 # Home Z
  # Restore motor current
  #
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config['tmc2209 stepper_x'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config['tmc2209 stepper_y'].run_current}
  Z_TILT_ADJUST
  G0 X{x_home - printer.configfile.config.bltouch.x_offset|float} Y{y_home - printer.configfile.config.bltouch.y_offset|float} F12000
  G28 Z                 # Home Z
  G0 Z30
  SET_VELOCITY_LIMIT ACCEL=3500

[gcode_macro START_PRINT]
gcode:
    # reset speed and feedrate modifiers    
    M220 S100
    M221 S100
    # reset fan speed
    M106 S0
    #Wait for bed
    M190 S{printer.heater_bed.target} 
    # Wait 5 min
    G4 P300000 
    # Use absolute coordinates
    G90
    # Start E heater while bed under calibration
    M104 S150
    # Home the printer
    G28

[gcode_macro PURGE_LINE]
gcode:
    G0 X10 Y5 ; Go to front
    G0 Z0.2 ; Drop to bed
    G92 E0 ; zero the extruded length
    G1 X100 E15 F750 ; Extrude 25mm of filament in a 4cm line
    G92 E0 ; zero the extruded length

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_GCODE_OFFSET Z=0
    SET_PRESSURE_ADVANCE ADVANCE=0.05 SMOOTH_TIME=0.04
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    M104 S0
    M106 S255
    #TEMPERATURE_WAIT SENSOR=<config_name> [MINIMUM=<target>] [MAXIMUM=<target>]
    #Wait until the given temperature sensor is at or above the supplied MINIMUM and/or at or below the supplied MAXIMUM.
    M109 S150
    M106 S0
    M109 S0

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    # Move nozzle away from print while retracting
    G91
    G1 E-0.5
    # Raise nozzle by 10mm
    G1 Z10
    G90
    G1 X5 Y200
    #UNLOAD
    M106 S255
    #TEMPERATURE_WAIT SENSOR=<config_name> [MINIMUM=<target>] [MAXIMUM=<target>]
    #Wait until the given temperature sensor is at or above the supplied MINIMUM and/or at or below the supplied MAXIMUM.
    M109 S150
    M106 S0
    M109 S0
    # Disable steppers
    M84

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z10
    G90
    G1 X50 Y200 F3000
    #G91
    #G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#command: SEARCH_VARS s="profile"
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}